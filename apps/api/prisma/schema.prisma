generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Technician {
  id            String         @id @default(uuid())
  email         String         @unique
  phone         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  customMessage String?
  servicePrices Json?
  firstName     String
  lastName      String
  password      String
  websiteURL    String?
  city          String?
  companyName   String?
  currency      String?
  state         String?
  timezone      String?
  zipCode       String?
  address       String?
  defaultSlotDurationMinutes Int @default(60)
  defaultBufferMinutes       Int @default(15)
  isPianoTechnician Boolean @default(false)
  isMusicTeacher Boolean @default(false)
  appointments  Appointment[]
  availability  Availability[]
  customers     Customer[]
  services      Service[]
  serviceAreas  ServiceArea[]
  serviceTypes  ServiceType[]
  weeklySchedule WeeklySchedule[]
  scheduleExceptions ScheduleException[]
  timeSlots     TimeSlot[]
}

model ServiceArea {
  id           String     @id @default(uuid())
  zipCode      String
  technicianId String
  technician   Technician @relation(fields: [technicianId], references: [id])
}

model Customer {
  id             String        @id @default(uuid())
  techId         String
  phone          String
  email          String?
  address        String
  referralCode   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  firstName      String
  lastName       String
  companyName    String?
  emailUpdates   Boolean       @default(true)
  textUpdates    Boolean       @default(true)
  city           String?
  state          String?
  zipCode        String?
  appointments   Appointment[]
  tech           Technician    @relation(fields: [techId], references: [id])
  pianos         Piano[]
  serviceHistory Service[]
}

model Piano {
  id              String        @id @default(uuid())
  customerId      String
  type            String
  brand           String?
  model           String?
  serialNumber    String?
  lastServiceDate DateTime?
  notes           String?
  year            Int?
  appointments    Appointment[]
  customer        Customer      @relation(fields: [customerId], references: [id])
  services        Service[]
}

model Service {
  id            String      @id @default(uuid())
  techId        String
  pianoId       String
  customerId    String
  serviceTypeId String?
  notes         String?
  serviceDate   DateTime    @default(now())
  customer      Customer    @relation(fields: [customerId], references: [id])
  piano         Piano       @relation(fields: [pianoId], references: [id])
  serviceType   ServiceType? @relation(fields: [serviceTypeId], references: [id])
  tech          Technician  @relation(fields: [techId], references: [id])
}

model ServiceType {
  id           String        @id @default(cuid())
  name         String
  description  String
  duration     String
  price        Float
  createdAt    DateTime      @default(now())
  technicianId String
  updatedAt    DateTime      @updatedAt
  durationMinutes Int @default(60)
  bufferMinutes   Int @default(15)
  serviceType  String
  serviceTypeColor String
  appointments Appointment[]
  services     Service[]
  technician   Technician  @relation(fields: [technicianId], references: [id])
}

model Appointment {
  id            String      @id @default(uuid())
  technicianId  String
  customerId    String
  pianoId       String?
  serviceTypeId String?
  scheduledAt   DateTime
  notes         String?
  createdAt     DateTime    @default(now())
  timeSlotId    String?
  endTime       DateTime?
  status        AppointmentStatus @default(SCHEDULED)
  customer      Customer    @relation(fields: [customerId], references: [id])
  piano         Piano?       @relation(fields: [pianoId], references: [id])
  serviceType   ServiceType? @relation(fields: [serviceTypeId], references: [id])
  technician    Technician  @relation(fields: [technicianId], references: [id])
  timeSlot      TimeSlot?   @relation(fields: [timeSlotId], references: [id])
}

model Availability {
  id        String     @id @default(uuid())
  dayOfWeek String
  startTime String
  endTime   String
  techId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tech      Technician @relation(fields: [techId], references: [id])

  @@unique([techId, dayOfWeek])
}

model WeeklySchedule {
  id            String     @id @default(uuid())
  technicianId  String
  dayOfWeek     Int
  startTime     String
  endTime       String
  blockName     String
  isAvailable   Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  technician    Technician @relation(fields: [technicianId], references: [id])

  @@unique([technicianId, dayOfWeek, startTime])
}

model ScheduleException {
  id            String     @id @default(uuid())
  technicianId  String
  date          DateTime
  startTime     String?
  endTime       String?
  isAvailable   Boolean    @default(true)
  reason        String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  technician    Technician @relation(fields: [technicianId], references: [id])

  @@unique([technicianId, date])
}

model TimeSlot {
  id            String     @id @default(uuid())
  technicianId  String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  durationMinutes Int
  bufferMinutes   Int
  status        TimeSlotStatus @default(AVAILABLE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  technician    Technician @relation(fields: [technicianId], references: [id])
  appointments  Appointment[]

  @@unique([technicianId, startTime])
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
  UNAVAILABLE
}
