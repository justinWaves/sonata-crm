datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // not DB_URL
}

generator client {
  provider = "prisma-client-js"
}

model Technician {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  email         String        @unique
  phone         String
  password      String
  websiteURL    String?
  companyName   String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  timezone      String?
  currency      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customMessage String?
  servicePrices Json? // e.g. { "Standard Tuning": 150, "Touch-Up": 100 }
  serviceTypes  ServiceType[]

  customers    Customer[]
  services     Service[]
  appointments Appointment[]
  serviceAreas ServiceArea[]
}

model ServiceArea {
  id           String     @id @default(uuid())
  zipCode      String
  technicianId String
  technician   Technician @relation(fields: [technicianId], references: [id])
}

model Customer {
  id             String        @id @default(uuid())
  techId         String
  tech           Technician    @relation(fields: [techId], references: [id])
  firstName      String
  lastName       String
  phone          String
  email          String?
  address        String
  referralCode   String?
  wantUpdates    Boolean       @default(true)
  pianos         Piano[]
  serviceHistory Service[]
  appointments   Appointment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Piano {
  id              String        @id @default(uuid())
  customerId      String
  customer        Customer      @relation(fields: [customerId], references: [id])
  type            String
  brand           String?
  year            Int?
  model           String?
  serialNumber    String?
  lastServiceDate DateTime?
  notes           String?
  services        Service[]
  appointments    Appointment[]
}

model Service {
  id     String     @id @default(uuid())
  techId String
  tech   Technician @relation(fields: [techId], references: [id])

  pianoId String
  piano   Piano  @relation(fields: [pianoId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  serviceTypeId String
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])

  notes       String?
  serviceDate DateTime @default(now())
}

model ServiceType {
  id           String        @id @default(cuid())
  name         String
  description  String
  price        Float
  duration     String
  technicianId String
  technician   Technician    @relation(fields: [technicianId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  services     Service[]
  appointments Appointment[]
}

model Appointment {
  id           String     @id @default(uuid())
  technicianId String
  technician   Technician @relation(fields: [technicianId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  pianoId String
  piano   Piano  @relation(fields: [pianoId], references: [id])

  serviceTypeId String
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])

  scheduledAt DateTime
  timeSlot    String? // e.g. "Morning", "Afternoon", "Evening"
  notes       String?
  createdAt   DateTime @default(now())
}
